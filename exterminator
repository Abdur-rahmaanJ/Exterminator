#!/usr/bin/python

# --- widget sortedlist so as not to depend on broken elmextension

"""A SortedList Widget for EFL"""
from efl.elementary.box import Box
from efl.elementary.button import Button
from efl.elementary.label import Label
from efl.elementary.panes import Panes
from efl.elementary.scroller import ELM_SCROLLER_POLICY_AUTO
from efl.elementary.scroller import ELM_SCROLLER_POLICY_OFF
from efl.elementary.scroller import ELM_SCROLLER_POLICY_ON
from efl.elementary.scroller import Scroller
# pylint: disable=no-name-in-module
from efl.evas import EVAS_HINT_EXPAND
from efl.evas import EVAS_HINT_FILL

EXPAND_BOTH = EVAS_HINT_EXPAND, EVAS_HINT_EXPAND
EXPAND_HORIZ = EVAS_HINT_EXPAND, 0.0
FILL_BOTH = EVAS_HINT_FILL, EVAS_HINT_FILL
FILL_HORIZ = EVAS_HINT_FILL, 0.5


# pylint: disable=too-many-instance-attributes
class SortedList(Scroller):
    """
    A "spread sheet like" widget for elementary.
    Argument "titles" is a list, with each element being a tuple:
    (<Display Text>, <Sortable>)
    """

    def __init__(
        self,
        parent_widget,
        *args,
        titles=None,
        initial_sort=0,
        ascending=True,
        **kwargs
    ):
        Scroller.__init__(self, parent_widget, *args, **kwargs)
        self.policy_set(ELM_SCROLLER_POLICY_AUTO, ELM_SCROLLER_POLICY_OFF)

        self.main_box = Box(
            self, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH
        )
        self.main_box.show()

        self.header = titles
        self.sort_column = initial_sort
        self.sort_column_ascending = ascending

        self.rows = []
        self.header_row = []

        header = Panes(self, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ)
        header.callback_unpress_add(self.cb_resize_pane)
        header.show()

        list_pane = Panes(self, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH)
        list_pane.callback_unpress_add(self.cb_resize_pane)
        list_pane.style_set("flush")
        list_pane.show()

        header.data["related"] = list_pane
        list_pane.data["related"] = header

        self.scroller = Scroller(
            self, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH
        )
        self.scroller.policy_set(ELM_SCROLLER_POLICY_OFF, ELM_SCROLLER_POLICY_ON)
        self.scroller.content = list_pane
        self.scroller.show()

        self.headers = []
        self.headers.append(header)
        self.list_panes = []
        self.list_panes.append(list_pane)
        self.lists = []

        if titles is not None:
            self.header_row_pack(titles)

        self.main_box.pack_end(header)
        self.main_box.pack_end(self.scroller)

        self.content = self.main_box
        self.show()

    def header_row_pack(self, titles):
        """Takes a list (or a tuple) of tuples (string, bool, int) and packs them to
        the first row of the table."""

        assert isinstance(titles, (list, tuple))
        for _t in titles:
            assert isinstance(_t, tuple)
            assert len(_t) == 2
            title, sortable = _t
            assert isinstance(title, str)
            assert isinstance(sortable, bool)

        def cb_sort_btn(button, col):
            """Aux function"""
            if self.sort_column == col:
                self.reverse()
            else:
                self.sort_by_column(col)

        title_cnt = len(titles)
        for count, flag in enumerate(titles):
            title, sortable = flag
            btn = Button(
                self,
                size_hint_weight=EXPAND_HORIZ,
                size_hint_align=FILL_HORIZ,
                text=title,
            )
            btn.callback_clicked_add(cb_sort_btn, count)
            if not sortable:
                btn.disabled = True
            btn.show()
            self.header_row.append(btn)

            box = Box(self, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH)
            box.show()

            if len(self.list_panes) < title_cnt:
                wdth = 1.0 / (title_cnt - count)
                self.list_panes[count].part_content_set("left", box)
                self.list_panes[count].content_left_size = wdth

                next_list = Panes(
                    self, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH
                )
                next_list.callback_unpress_add(self.cb_resize_pane)
                next_list.style_set("flush")
                next_list.show()

                self.list_panes[count].part_content_set("right", next_list)
                self.list_panes.append(next_list)

                self.headers[count].part_content_set("left", btn)
                self.headers[count].content_left_size = wdth

                next_header = Panes(
                    self, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ
                )
                next_header.callback_unpress_add(self.cb_resize_pane)
                next_header.show()

                self.headers[count].part_content_set("right", next_header)
                self.headers.append(next_header)

                next_list.data["related"] = next_header
                next_header.data["related"] = next_list
            else:
                self.list_panes[count - 1].part_content_set("right", box)
                self.headers[count - 1].part_content_set("right", btn)

            self.lists.append(box)

    # pylint: disable=no-self-use
    def cb_resize_pane(self, obj):
        """Resize display pane"""
        left = obj.content_left_size
        right = obj.content_right_size
        related = obj.data["related"]

        related.content_left_size = left
        related.content_right_size = right

    def row_pack(self, row, sort=True):
        """Takes a list of items and packs them to the table."""

        assert len(row) == len(self.header_row), (
            "The row you are trying to add to this sorted list has the wrong "
            "number of items! expected: %i got: %i" % (len(self.header_row), len(row))
        )

        self.rows.append(row)
        self.add_row(row)

        if sort:
            self.sort_by_column(self.sort_column)

    def add_row(self, row):
        """Add Row to list"""
        # print("Test %s"%row)
        for count, item in enumerate(row):
            self.lists[count].pack_end(item)

    def row_unpack(self, row, delete=False):
        """Unpacks and hides, and optionally deletes, a row of items.
        The argument row can either be the row itself or its index number.
        """
        if isinstance(row, int):
            row_index = row
        else:
            row_index = self.rows.index(row) + 1

        # print("row index: " + str(row_index-1))
        # print("length: " + str(len(self.rows)))
        # print("sort_data: " + str(row[self.sort_column].data["sort_data"]))

        row = self.rows.pop(row_index - 1)

        for count, item in enumerate(row):
            self.lists[count].unpack(item)
            if delete:
                item.delete()
            else:
                item.hide()

        self.sort_by_column(self.sort_column, ascending=self.sort_column_ascending)

    def unpack_all(self):
        """Clear row"""
        tmplist = list(self.rows)
        for row in tmplist:
            self.row_unpack(row)

    def reverse(self):
        """Reverse list"""
        rev_order = reversed(list(range(len(self.rows))))
        for box in self.lists:
            box.unpack_all()

        for new_y in rev_order:
            self.add_row(self.rows[new_y])

        label = self.header_row[self.sort_column].part_content_get("icon")
        if label is not None:
            if self.sort_column_ascending:
                label.text = u"⬆"
                self.sort_column_ascending = False
            else:
                label.text = u"⬇"
                self.sort_column_ascending = True

        self.rows.reverse()

    def sort_by_column(self, col, ascending=True):
        """Sort column"""
        assert col >= 0
        assert col < len(self.header_row)

        self.header_row[self.sort_column].icon = None

        btn = self.header_row[col]
        label = Label(btn)
        btn.part_content_set("labelon", label)
        label.show()

        if ascending:  # sascending:
            label.text = u"⬇"
            self.sort_column_ascending = True
        else:
            label.text = u"⬆"
            self.sort_column_ascending = False

        orig_col = [
            (i, x[col].data.get("sort_data", x[col].text))
            for i, x in enumerate(self.rows)
        ]
        sorted_col = sorted(orig_col, key=lambda e: e[1])
        new_order = [x[0] for x in sorted_col]

        if not ascending:
            new_order.reverse()

        for box in self.lists:
            box.unpack_all()

        for new_y in new_order:
            self.add_row(self.rows[new_y])

        self.rows.sort(key=lambda e: e[col].data.get("sort_data", e[col].text))
        self.sort_column = col

    def update(self):
        """Update"""
        self.sort_by_column(self.sort_column, self.sort_column_ascending)


# --- widget sorted list end

# encoding: utf-8
"""Exterminator is a simple task manager written in Elementary and Python."""

# General imports
import getpass
import queue as Queue
import threading

# efl imports
import efl.elementary as elm
# from multiprocessing import Queue
import psutil
from efl import ecore
from efl.elementary.box import Box
from efl.elementary.button import Button
from efl.elementary.check import Check
from efl.elementary.flip import ELM_FLIP_CUBE_DOWN
from efl.elementary.flip import Flip
from efl.elementary.frame import Frame
from efl.elementary.icon import Icon
from efl.elementary.label import Label
from efl.elementary.progressbar import Progressbar
# from efl.elementary.separator import Separator
from efl.elementary.window import StandardWindow
from efl.evas import EVAS_HINT_EXPAND
from efl.evas import EVAS_HINT_FILL
from elmextensions import AboutWindow
from elmextensions import InstanceError

# from elmextensions import SortedList

# try:                         # Python 2.x
#     import Queue
# except ModuleNotFoundError:  # Python 3.x


__author__ = "Jeff Hoogland"
__contributors__ = ["Jeff Hoogland", "Scimmia"]
__copyright__ = "Copyright (C) 2014 Bodhi Linux"
__version__ = "0.2.4"
__description__ = "A simple task manager for the Enlightenment Desktop."
__github__ = "http://jeffhoogland.github.io/Exterminator/"
__source__ = "Source code and bug reports: {0}".format(__github__)
PY_EFL = "https://git.enlightenment.org/bindings/python/python-efl.git/"

AUTHORS = """
<br>
<align=center>
<hilight>Jeff Hoogland (Jef91)</hilight><br>
<link><a href=http://www.jeffhoogland.com>Contact</a></link><br><br>
Scimmia<br><br>
</align>
"""

LICENSE = """<br>
<align=center>
<hilight>
Copyright (c) 2015, Jeff Hoogland<br>
All rights reserved.<br>
</hilight>
<br>
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:<br>
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.<br>
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.<br>
    * Neither the name of the <organization> nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.<br>
<br>
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
</align>
<br>
"""

INFO = """
<align=center>
<hilight>Exterminator</hilight> is a simple task manager written in Elementary
 and Python.<br>
<br>
<br>
</align>
"""

EXPAND_BOTH = EVAS_HINT_EXPAND, EVAS_HINT_EXPAND
EXPAND_HORIZ = EVAS_HINT_EXPAND, 0.0
FILL_BOTH = EVAS_HINT_FILL, EVAS_HINT_FILL
FILL_HORIZ = EVAS_HINT_FILL, 0.5


# class ThreadedFunction(object):
class ThreadedFunction:
    """The ThreadedFunction class."""

    def __init__(self, done_cb=None):
        # private stuff
        self._command_queue = Queue.Queue()
        self._reply_queue = Queue.Queue()
        self._done_cb = done_cb

        # add a timer to check the data returned by the worker thread
        self._timer = ecore.Timer(0.1, self.check_reply_queue)

        # start the working thread
        threading.Thread(target=self.thread_func).start()

    def run(self, action):
        """Adds the desired command (action) to the command queue."""
        self._command_queue.put(action)

    def shutdown(self):
        """Adds the Quit function to the command queue."""
        self._timer.delete()
        self._command_queue.put("QUIT")

    def check_reply_queue(self):
        """Checks if commands in command queue were executed"""
        if not self._reply_queue.empty():
            _ = self._reply_queue.get()
            if callable(self._done_cb):
                self._done_cb()
        return True

    # all the member below this point run in the thread
    def thread_func(self):
        """Executes commands in command queue"""
        while True:
            # wait here until an item in the queue is present
            func = self._command_queue.get()
            if callable(func):
                func()
            elif func == "QUIT":
                break
            self._reply_queue.put("done")


class ProcessRowList(list):
    """A list consisting of:
    [
        Check: checkbox to select process with PID text,
        Label: Process name,
        Label: CPU,
        Label: Memory,
        Label: User
    ]

    inheriting from list allows crazy stuffs like
    self.append and is one of the most brutal programming
    practices i have ever seen

    was previously named: Process
    """

    def __init__(self, parent, data: dict):
        """
        data: {
                        "pid": process.pid,
                        "name": name,
                        "username": username,
                        "cpu": (process.cpu_percent(interval=0) / self.cpu_count),
                        "mem": float(process.memory_info().rss) / 1048576,
                    }
        parent: Any element, self passed for Box
        """
        super().__init__()
        self.win = parent.win
        self.data = data

        # Ui elements that will be used
        self.pid_check = None
        self.pname_label = None
        self.user_label = None
        self.cpu_label = None
        self.mem_label = None

        
        # checkbox used to select process and kill
        process_data = str(data["pid"])
        self.pid_check = Check(self.win, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH)
        self.pid_check.text = process_data
        self.pid_check.data["sort_data"] = data["pid"]
        self.pid_check.callback_changed_add(parent.check_sel)
        self.pid_check.show()


        # label for name of process
        self.pname_label = Label(self.win, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH)
        # self.pname.text = data["name"][0:25]
        self.pname_label.text = data["name"]
        self.pname_label.show()


        # label for linux user username
        self.user_label = Label(self.win, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH)
        self.user_label.text = data["username"]
        self.user_label.show()


        # label for cpu usage for process
        self.cpu_label = Label(
            self.win, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH
        )
        cpu = data["cpu"]
        self.cpu_label.text = "%.0f %%" % cpu
        self.cpu_label.data["sort_data"] = cpu
        self.cpu_label.show()


        # label for memory usage for process
        self.mem_label = Label(
            self.win, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH
        )
        mem = data["mem"]
        self.mem_label.text = "%.1f MB" % mem
        self.mem_label.data["sort_data"] = mem
        self.mem_label.show()


        # Add the ui elements to self which is a list
        self.append(self.pid_check)
        self.append(self.pname_label)
        self.append(self.cpu_label)
        self.append(self.mem_label)
        self.append(self.user_label)


    def update(self, data: dict):
        """
        data same as above, only updates CPU and 
        memory labels
        """
        self.data = data
        cpu = data["cpu"]
        self.cpu_label.text = "%.0f %%" % cpu
        self.cpu_label.data["sort_data"] = cpu
        mem = data["mem"]
        self.mem_label.text = "%.1f MB" % mem
        self.mem_label.data["sort_data"] = mem


class MainWindow(StandardWindow):
    """The MainWindow class."""

    def __init__(self):
        """TODO: docstring"""
        StandardWindow.__init__(self, "exterminator", "Exterminator", size=(800, 400))
        self.callback_delete_request_add(self.quit_all)

        icon = Icon(self)
        icon.size_hint_weight_set(EVAS_HINT_EXPAND, EVAS_HINT_EXPAND)
        icon.size_hint_align_set(EVAS_HINT_FILL, EVAS_HINT_FILL)
        icon.standard_set("utilities-system-monitor")
        icon.show()
        self.icon_object_set(icon.object_get())

        self.task_manager = TaskManager(self)
        self.task_manager.show()

        self.resize_object_add(self.task_manager)

    def quit_all(self, _):
        """TODO: docstring"""
        self.task_manager.threaded_function.shutdown()
        elm.exit()


class TaskManager(Box):
    """The TaskManager class."""

    def __init__(self, parent):
        """TODO: docstring"""
        Box.__init__(self, parent)
        self.win = win = parent
        self.appstokill = []
        self.process = {}

        self.threaded_function = ThreadedFunction(self.refresh_gui)
        self.getting_data = False

        self.size_hint_weight = EXPAND_BOTH
        self.size_hint_align = FILL_BOTH

        self.loop = ecore.timer_add(0.1, self.update)

        self.cpu = None
        self.ramtota = None
        self.ramused = None

        cpu = psutil.cpu_percent(interval=1) / 100.0
        ram = psutil.virtual_memory()

        # Totals in MB
        ramtota = float(ram.total) / (1048576)
        ramused = ramtota * ram.percent * 0.01

        ramframe = self.ramframe = Frame(self.win)
        ramframe.show()
        ramframe.size_hint_weight = (EVAS_HINT_EXPAND, 0.0)
        ramframe.size_hint_align = FILL_BOTH
        ramframe.text_set("Memory Usage:")

        self.rambar = rambar = Progressbar(
            self.win,
            span_size=250,
            size_hint_weight=(EVAS_HINT_EXPAND, 0.0),
            size_hint_align=FILL_HORIZ,
        )
        rambar.show()
        rambar.unit_format = "%.0f MB out of %.0f MB" % (ramused, ramtota)
        rambar.value_set(ramused / ramtota)
        ramframe.content = rambar

        cpuframe = self.cpuframe = Frame(self.win)
        cpuframe.show()
        cpuframe.text_set("CPU Usage:")
        cpuframe.size_hint_weight = (EVAS_HINT_EXPAND, 0.0)
        cpuframe.size_hint_align = FILL_BOTH

        self.cpubar = cpubar = Progressbar(
            self.win,
            span_size=250,
            size_hint_weight=(EVAS_HINT_EXPAND, 0.0),
            size_hint_align=FILL_HORIZ,
        )
        cpubar.show()
        cpubar.value_set(cpu)
        cpuframe.content = cpubar

        titles = [
            ("PID", True),
            ("Process Name", True),
            ("CPU", True),
            ("Memory", True),
            ("User", True),
        ]

        self.slist = slist = SortedList(
            self,
            titles=titles,
            size_hint_weight=EXPAND_BOTH,
            size_hint_align=FILL_BOTH,
            homogeneous=True,
        )

        slist.show()

        kills = Button(
            self.win, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ
        )
        kills.text = "Kill Selected Processes"
        kills.callback_clicked_add(self.kill_selected)
        kills.show()

        icon = Icon(self.win, thumb="True")
        icon.standard_set("help-about")

        about = Button(self.win, size_hint_align=(1.0, 0.0))
        about.content = icon
        about.callback_clicked_add(self.show_about)
        about.show()

        top_box = Box(win)
        top_box.horizontal = True
        top_box.pack_end(cpuframe)
        top_box.pack_end(ramframe)
        top_box.show()

        bottom_box = Box(win, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ)
        bottom_box.horizontal = True
        bottom_box.pack_end(kills)
        bottom_box.pack_end(about)
        bottom_box.show()

        wheel = Progressbar(
            self,
            pulse_mode=True,
            size_hint_weight=EXPAND_BOTH,
            size_hint_align=FILL_HORIZ,
        )
        wheel.pulse(True)
        wheel.show()

        self.flip = Flip(self, size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH)
        self.flip.part_content_set("back", self.slist)
        self.flip.part_content_set("front", wheel)
        self.flip.show()

        self.pack_end(top_box)
        self.pack_end(self.flip)
        self.pack_end(bottom_box)

        self.pids_to_update = {}
        self.pids_to_remove = []

        try:
            # psutil 2.x method
            self.cpu_count = psutil.cpu_count()
        except AttributeError:
            # psutil 1.x method
            self.cpu_count = psutil.NUM_CPUS

    def update(self):  # , stuff=None, otherstuff=None):
        """TODO: docstring"""
        if not self.getting_data:
            self.threaded_function.run(self.get_psutil_data)

        return 1

    def refresh_gui(self):
        """TODO: docstring"""
        for pid in self.pids_to_update:
            if pid in self.process:
                self.process[pid].update(self.pids_to_update[pid])
            else:
                cess = ProcessRowList(self, self.pids_to_update[pid])
                # print('...', cess)
                self.process[pid] = cess
                self.slist.row_pack(cess, sort=False)

        for pid in self.pids_to_remove:
            if pid in self.process:
                self.slist.row_unpack(self.process[pid], True)
                self.process.pop(pid, None)

        self.pids_to_update.clear()
        del self.pids_to_remove[:]

        self.slist.update()

        self.cpubar.value_set(self.cpu)
        self.rambar.value_set(self.ramused / self.ramtota)
        self.rambar.unit_format = "%.0f MB out of %.0f MB" % (
            self.ramused,
            self.ramtota,
        )

        if self.flip.front_visible:
            self.flip.go(ELM_FLIP_CUBE_DOWN)

    def run_command(self, command):
        """TODO: docstring"""
        cmd = ecore.Exe(command)
        cmd.on_del_event_add(self.update)

    def kill_selected(self):  # , bt):
        """TODO: docstring"""
        for pid in self.appstokill:
            self.kill_process(pid)

    def check_sel(self, check):
        """TODO: docstring"""
        if check.state_get():
            self.appstokill.append(check.text)
        else:
            self.appstokill.remove(check.text)
        # print(self.appstokill)

    def kill_process(self, pid):
        """TODO: docstring"""
        self.run_command("kill -9 %s" % pid)

    def get_psutil_data(self):  # , cmd=False, arg=False):
        """TODO: docstring"""
        # print("cmd %s , arg %s" % (cmd, arg))
        self.getting_data = True
        print("getting data")
        tmp = list(psutil.process_iter())
        currentpids = []
        for process in tmp:
            try:
                # in psutil 1.2.1 we can reference these directly
                username = process.username
                name = process.name
                if callable(name):
                    # in psutil 2.0 we need to call them
                    username = process.username()
                    name = process.name()
                if username == getpass.getuser():
                    currentpids.append(process.pid)
                    self.pids_to_update[process.pid] = {
                        "pid": process.pid,
                        "name": name,
                        "username": username,
                        "cpu": (process.cpu_percent(interval=0) / self.cpu_count),
                        "mem": float(process.memory_info().rss) / 1048576,
                    }
            except TypeError:
                pass
        for pid in self.process:
            if pid not in currentpids:
                self.pids_to_remove.append(pid)

        self.cpu = psutil.cpu_percent(interval=1) / 100.0
        ram = psutil.virtual_memory()

        # Totals in MB
        self.ramtota = float(ram.total) / (1048576)
        self.ramused = self.ramtota * ram.percent * 0.01
        self.getting_data = False

    def show_about(self, _=False):
        """TODO: docstring"""
        try:
            AboutWindow(
                self,
                title="Exterminator",
                standardicon="utilities-system-monitor",
                version=__version__,
                authors=AUTHORS,
                licen=LICENSE,
                webaddress=__github__,
                info=INFO,
            )
        except InstanceError:
            pass




if __name__ == "__main__":
    elm.init()
    GUI = MainWindow()
    GUI.show()
    elm.run()
    elm.shutdown()
